I"ê*<p>#</p>
<h3 id="real-time-garbage-collection-is-real">Real-Time Garbage Collection Is Real</h3>

<p>Real-Time Garbage Collection (RTGC) tests the limits of what we typically think is possible in production software. You might hear ‚ÄúReal-Time‚Äù and ‚ÄúGarbage Collection‚Äù together and think ‚ÄúIf you truly need real-time guarantees, why would you use a garbage collected language?‚Äù or ‚ÄúHow is real-time Garbage Collection even possible?‚Äù Or if you‚Äôre like me, you might even want to know ‚ÄúWhat is Real-Time?‚Äù It turns out that RTGC is very real, and research on it is very active. If you want to learn more, there is fantastic coverage of the subject in Jones et al‚Äôs <em>The Garbage Collection Handbook,</em> which heavily influenced the writing of this post: unless otherwise noted, quotes are from Jones.<a href="#bib5">[5]</a></p>

<p>This post is a brief introduction to the concepts of RTGC with a focus on how the <em>work</em> in such a system is scheduled. Along the way, the casual observer can maybe learn a lesson about the ever-present trade-offs that stretch our limits as programmers and thinkers, and make insane ideas like RTGC possible.</p>

<h4 id="what-is-real-time">What is Real-Time?</h4>

<p>Since Garbage Collected languages have conquered the enterprise and are thoroughly mainstream, their benefits are desired in real-time scenarios. These days, Real-Time Garbage Collected software can be found running everywhere from dedicated server applications to embedded devices.<a href="#bib6">[6]</a> In order to be able to discuss some interesting aspects of implementing RTGC, it would be helpful to have some definitions. Here are a few key terms:</p>

<ul>
  <li><strong>Garbage Collection</strong> (GC) is a form of <em>Automatic Memory Management</em> which gives a program the appearance of infinite memory by reclaiming allocated objects which are no longer in use. The implementation details of GC include how memory is allocated, stored and referred to during program execution, and eventually reclaimed and freed.</li>
  <li>A <strong>real-time system</strong> is ‚Äúa hardware or software system that is subject to deadlines from event to system response.‚Äù Some <em>soft</em> real-time systems such as video displays can tolerate the occasional failure; a dropped frame isn‚Äôt the end of the world. There are also <em>hard</em> real-time systems such as those running internal combustion engines, which rightly consider even one missed deadline a total system failure: missing a deadline can mean damaging an engine.</li>
  <li>The <strong>mutator</strong> is the part of a running program which executes application code, so called because ‚Äúfrom the collector‚Äôs point of view it simply mutates the graph of objects‚Äù</li>
  <li>The <strong>collector</strong> is the part of the running program which handles the duties of GC</li>
  <li><strong>Mutator utilization</strong> is the ‚Äúfraction of CPU time used by the mutator, as opposed to by the collector‚Äù</li>
</ul>

<p>With those in place, <strong>Real-Time Garbage Collection</strong> is <em>Automatic Memory Management</em> capable of:</p>

<ul>
  <li>Guaranteeing a certain amount of mutator utilization in a given time window</li>
  <li>Accounting precisely for all mutator interruptions</li>
  <li>Ensuring that space bounds are not exceeded</li>
</ul>

<p>Which is a pretty amazing feat, even once you understand that RTGC isn‚Äôt a magical formula that somehow makes the trade-offs present in regular GC go away. In order to put a finer point on the requirements listed above, consider the following illustration of program execution and GC behavior:</p>

<center><img src="http://michaelrbernste.in/images/real_time_pauses.png" /></center>
<center><b><i>Mutator (white) and Collector (non-white) timings<br />during normal execution and two GC runs.<br />
        Top: Stop the World, Middle: Incremental, Bottom: Real-Time <a href="#bib4">[3]</a></i></b></center>

<p>The top band shows two long GC pauses which reflect normal behavior of <em>Stop the World</em> GC such as vanilla Mark-and-Sweep. While the pauses appear consistent, they are each too long. For this reason, RTGC is not often pursued in a non-incremental context: it is too difficult to keep pause times below a desired threshold. The middle band, which shows shorter but more irregular GC pauses over two collections, illustrates a normal incremental GC such as a Baker copying collector. While the lengths are better, the pauses are simply too irregular. This prompted Jones to say, in the last chapter of a textbook which covers every classic and most well-known modern collectors:</p>

<blockquote>
  <p>‚Äú‚Ä¶as real-time systems are now understood, none of the previous algorithms live up to the promise of supporting true real-time behavior.‚Äù</p>
</blockquote>

<p>The bottom band above shows ideal behavior for RTGC. Pauses are short and regularly spaced out - in a word, predictable. I was drawn to this means of visualizing GC behavior by the authors of a very interesting approach to RTGC, known as <em>The Metronome.</em><a href="#bib1">[1]</a> <a href="#bib3">[3]</a> The algorithm is interesting for a number of reasons, but I found one detail particularly striking, as a tweak to the algorithm is made in an area not often explored in GC. The authors suggest that a different means of <em>scheduling</em> the collector execution is key to guaranteeing sufficient mutator utilization.</p>

<h4 id="scheduling-real-time-garbage-collection">Scheduling Real-Time Garbage Collection</h4>

<p>In order to satisfy the guarantees described above, RTGC algorithms need to pay special attention to how the collector will be called to do its work. There are three primary ways of describing how RTGC can schedule the work for its collector:</p>

<ul>
  <li><strong>Work based scheduling</strong> executes small amounts of collector work each time the mutator does work</li>
  <li><strong>Slack based scheduling</strong> runs the collector when the mutator is not working</li>
  <li><strong>Time based scheduling</strong> periodically schedules and runs the collector according to an interval</li>
</ul>

<p>The <em>Metronome</em> authors made some headway in the area of RTGC scheduling. As they state:</p>

<blockquote>
  <p>‚ÄúWe show both analytically and experimentally that time-based scheduling is superior, particularly at the short intervals that are typically of interest in real-time systems. Work-based algorithms may achieve short individual pause times, but are unable to achieve consistent utilization.‚Äù <a href="#bib2">[2]</a></p>
</blockquote>

<p>I found this to be fascinating - it‚Äôs true that work and slack based scheduling approaches can provide predictably short pause times, but they do not have the ability to make the decision to also guarantee an acceptable amount of mutator utilization. Jones brings up another very interesting paper, <em>A hard look at hard real-time garbage collection</em> where the author concurs:</p>

<blockquote>
  <p>‚ÄúI see a growing consensus that time-based methods, in which the garbage collector is treated as a separate task in the real-time scheduling problem, allow more realistic timing analysis of the real-time code, by decreasing GC ‚Äútaxes‚Äù on mutator operations.‚Äù <a href="#bib4">[4]</a></p>
</blockquote>

<p>That‚Äôs just how the Metronome functions when it is run with the time-based scheduler. During programming execution, many times per second, a <em>heartbeat</em> runs which causes the system to schedule small units of collector work if necessary. The algorithm can target a particular percentage of mutator utilization and guarantee that it will be preserved over a sliding window, scheduling even sized slices of time for either the mutator or the collector.</p>

<h4 id="a-trade-off-and-a-send-off">A Trade-Off and a Send-Off</h4>

<p>Just to remind you that I‚Äôm not lying, Real-Time Garbage Collection is real, and this is not magical: <strong>there are trade-offs to be made</strong>. In order to be able to provide a consistently scheduled amount of memory, we have to ease off on our requirements for space bounds - our running programs may exceed the amount of space we want them to take (but not the amount of space that we estimate they could possibly take).</p>

<p>While reading the literature about RTGC, I was struck again and again by how the basic principles that non real-time software developers operate by are invalid in a world of such strict guarantees. In order to consider deploying real-time code, an enormous amount of testing, measurement, prediction, proof, etc. has to occur. The Garbage Collector can operate with the knowledge that it can expect a consistent amount of work, within a reasonable degree. Jones points out that work-based scheduling can guarantee our requirements as long as the amount of work done can be properly estimated. Time-based scheduling can provide stronger time guarantees but will have to use more space during times of heavy use if the system is not expecting it. Trade-offs. Always trade-offs.</p>

<p><em>Thanks to James Golick for his proofreading and Computology expertise.</em></p>

<h4 id="works-cited">Works Cited</h4>

<p><a id="bib1">[1]</a> David F. Bacon, Perry Cheng, and V.T. Rajan. <em>The Metronome: A simpler approach to garbage collection in real-time systems.</em> In On The Move to Meaningful Internet Systems 2003: OTM 2003 Workshops, volume 2889 of Lecture Notes in Computer Science, pages 466-478, Catania, Sicily, Italy, November 2003. Springer-Verlag</p>

<p><a id="bib2">[2]</a> David F. Bacon, Perry Cheng, and V.T. Rajan. <em>A real-time garbage collector with low overhead and consistent utilization.</em> In POPL 2003 [POPL03], 2003, pages 285-298.</p>

<p><a id="bib3">[3]</a> Perry Cheng. <em>A Mostly Non-Copying Real-Time Collector with Low Overhead and Consistent Utilization</em> PowerPoint presentation. <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=0CEIQFjAC&amp;url=http%3A%2F%2Fwww.research.ibm.com%2Fmetronome%2Ftalks%2FCheng03RealtimeTalk.ppt&amp;ei=FISsUalEi_zgA6q_gKgN&amp;usg=AFQjCNENCLDCMhnl7kzKjiOyakYG9SSDwQ&amp;sig2=EQE8W4WNYKbKzAovyrT0ow&amp;bvm=bv.47244034,d.dmg">Available Here</a></p>

<p><a id="bib4">[4]</a> David Detlefs. <em>A hard look at hard real-time garbage collection.</em> In ISORC 2004 [ISORC04], 2004, pages 23-32.</p>

<p><a id="bib5">[5]</a> Richard Jones, Antony Hosking, and Eliot Moss. <em>The Garbage Collection Handbook: The Art of Automatic Memory Management.</em> CRC Applied Algorithms and Data Structures. Chapman &amp; Hall, August 2012, pages 375-416.</p>

<p><a id="bib6">[6]</a> Tony Printezis. <em>On measuring garbage collection responsiveness.</em> Science of Computer Programming, 62(2):164-183, October 2006</p>
:ET