I"Í\<p>#</p>

<div class="lead">This post is part of a series exploring <a href="http://www.info.ucl.ac.be/~pvr/book.html">Concepts, Techniques, and Models of Computer Programming</a> by Van Roy and Haridi. Check the <a href="/">blog index</a> for more.</div>

<p>#</p>
<h3 id="why-we-need-explicit-state">Why We Need Explicit State</h3>

<p>The fact that the authors of <em>Concepts, Techniques, and Models of Computer Programming</em> wait until page 405 (about halfway through the book) to introduce the concept and implementation of <em>explicit state</em> is a joke that tells itself. Explicit, mutable state is the cause of enough confusion and complexity that entire languages and paradigms are based around the idea of avoiding it, and yet many beginning professional programmers and computer science students learn with it up front. Unfortunately, in the long run, the joke is on these beginners, who often struggle in a sea of complexity.</p>

<p>‚ÄúExplicit State‚Äù is the title of Chapter 6 of Concepts, Techniques, and Models of Computer Programming. Far from a diatribe, the treatment of the subject is subtle in the hands of Van Roy and Haridi who use introducing explicit state as an opportunity to consider the pure world of declarative programming in the harsh realities of the real world.</p>

<p>CTM is a book that is distinguished amongst the Computer Science textbooks that preceded it in a variety of ways, from its early introduction to dataflow variables to its multi-paradigm approach. Certain aspects of this radical departure from previous literature at times seems like a direct reaction to certain books in particular, one of them being Abelson and Sussman‚Äôs epic <em>The Structure and Interpretation of Computer Programs</em> (SICP). Interestingly, in holding off on the discussion of state and trying to balance a description of its importance with warnings about its cost, the two books take very similar approaches. I‚Äôll cover a bit of SICP‚Äôs approach as a way of reinforcing some of Van Roy and Haridi‚Äôs ideas in this post.</p>

<p>During the course of this tour of explicit state, the <em>stateful model of computation</em> is introduced, which bears a strong resemblance to the model used in <a href="http://michaelrbernste.in/2013/09/11/message-passing-and-concurrent-program-design.html">Chapter 5‚Äôs message-passing model</a>. A few different applications of the stateful model are discussed, including the implementation of Abstract Data Types, which see some very nice improvements over their declarative counterparts. Because complexity comes along with the introduction of new ideas to the computational model, ideas for handling it are discussed, and finally the fundamental challenge of the sequential nature of state is addressed.</p>

<h4 id="what-is-state">What is State?</h4>

<p>Before explaining the new techniques we have at our disposal, the authors want us to ask ourselves: What is State? Or maybe more specifically, What is <em>a</em> state?</p>

<blockquote>
  <p>‚ÄúA state is a sequence of values in time that contains the intermediate results of a desired computation.‚Äù</p>
</blockquote>

<p>The authors explain that there are two types of state - <em>implicit</em> or declarative state, and <em>explicit state</em>. We have seen implicit state before in the book, such as recursive functions that encapsulate values over time. However, the authors distinguish this type of state as implicit because the consumer of the function in that case is not concerned with the implementation detail as being stateful, it simply produces the desired computation.</p>

<p>Explicit state, on the other hand, is defined as:</p>

<blockquote>
  <p>‚ÄúAn explicit state in a procedure is a state whose lifetime extends over more than one procedure call without being present in the procedure‚Äôs arguments‚Äù</p>
</blockquote>

<p>This kind of state wasn‚Äôt possible in other models that we‚Äôve seen, and we have been warned repeatedly about the potential for complexity that allowing this semantics can introduce. Still, this type of programming with explicit state is ubiquitous and necessary, so understanding how it works is important.</p>

<h4 id="the-stateful-model">The Stateful Model</h4>

<p>The stateful model is a tweak on the declarative model of computation that adds a mutable store alongside the immutable store and the semantic stack that we see in the most basic kernel language implementation:</p>

<center>
<img src="http://michaelrbernste.in/images/explicit_state_computational_model.png" />
<div class="lead">The Stateful Model of Computation<a href="#bib1">[1]</a></div>
</center>

<p>Stateful programs in this model are always sequential. The ‚ÄúSemantic Stack‚Äù above represents the ordered operations that comprise a program written in the kernel language. The ‚ÄúImmutable Store‚Äù is present in all of the kernel languages we have seen so far, and is the main ‚Äúenvironment‚Äù which preserves the stated relationships between immutable variables and values. New here is the ‚ÄúMutable store‚Äù which allow a new syntactic construct enabling a powerful semantic addition to the language: mutable state. This requires the addition of a minimal number of operations to the kernel language:</p>

<center>
<img src="http://michaelrbernste.in/images/explicit_state_stateful_model.png" />
<div class="lead">The Stateful Model Kernel Language<a href="#bib1">[1]</a></div>
</center>

<p>Two convenience methods for manipulating cells can make the language even more expressive, but amount to syntactic sugar for the <code class="language-plaintext highlighter-rouge">Exchange</code> operation:</p>

<center>
<img src="http://michaelrbernste.in/images/explicit_state_cell_operations.png" />
<div class="lead">The Stateful Model Kernel Language: Cell Operations<a href="#bib1">[1]</a></div>
</center>

<p>With this new sematic device (the mutable store), we can create, assign value to, read value from, and swap the values of the contents of mutable <em>cells.</em> Here is a simple program that uses these new constructs:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">local
  </span>C <span class="o">={</span>NewCell 0<span class="o">}</span>
<span class="k">in
  </span>fun <span class="o">{</span>SumList Xs S<span class="o">}</span>
    C:<span class="o">=</span>@C+1
    <span class="k">case</span> Xs
    of nil <span class="k">then </span>S
    <span class="o">[]</span> X|Xr <span class="k">then</span> <span class="o">{</span>SumList Xr X+S<span class="o">}</span>
    end
  end
  fun <span class="o">{</span>SumCount<span class="o">}</span> @C end
end</code></pre></figure>

<p>Here we can see a new <code class="language-plaintext highlighter-rouge">Cell</code> being created and used within the scope of a function. Repeated calls to <code class="language-plaintext highlighter-rouge">SumList</code> in the program will encapsulate the state of the <code class="language-plaintext highlighter-rouge">Cell</code>, allowing the consumer of the function to worry only about the value, and not the implementation details of the function.</p>

<p>This is the essence of the power available to us, and the reason that almost every practical programming languages is willing to pay the cost of introducing a technique that requires a radical rethinking of the implementation of the mechanics of computation.</p>

<p>One way to think of it is that as we ‚Äúdon‚Äôt care‚Äù about the implementation details of the <code class="language-plaintext highlighter-rouge">SumList</code> above, we also don‚Äôt have access to change it in a fundamental way. This tradeoff is something that is very well covered in Abelson and Sussman‚Äôs treatment of the same topic, so I‚Äôm going to take an opportunity to indulge a tangent in that direction.</p>

<h4 id="the-sicp-perspective">The SICP Perspective</h4>

<p>SICP is a book which is primarily concerned with teaching functional programming through the use of the Scheme programming language. Similarly to CTM, it spends a lot of time explicating the mechanics of computation, but through the lens of one paradigm, and primarily from a mathematical perspective. To best teach those that understood engineering and mathematical principles and get them to understand computation, the approach is taken to begin with functions that are pure, and to work from there. This probably sounds familiar if you‚Äôve read the other posts on this blog about CTM.</p>

<p>To highlight the elegance of a bit of well-placed explicit state, the authors of SICP ask us to consider a random number generator and the use of that kind of function in a larger program, like a <em>Monte Carlo simulation</em>. Without explicit state, the following random number generator, written in Scheme, would not be able to provide the nice interface of <em>just calling <code class="language-plaintext highlighter-rouge">rand</code></em>:</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="nv">rand</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">x</span> <span class="nv">random-init</span><span class="p">))</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
      <span class="p">(</span><span class="k">set!</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">rand-update</span> <span class="nv">x</span><span class="p">))</span>
      <span class="nv">x</span><span class="p">)))</span></code></pre></figure>

<p>Instead, you would have to pass the current value of the random number generator each time, which quickly becomes a pain in even a trivial program like the one the authors demonstrate.</p>

<p>To get a sense for the fundamental change that takes place when SICP introduces the <code class="language-plaintext highlighter-rouge">set!</code> operation, it is important to realize that up until the point in the book where state is introduced, one mechanic (the substitution model) had been used to compute programs. This model has the same declarative, referentially transparent properties as the early models in CTM.</p>

<p>The authors of SICP are quick to praise the transparency and simplicity of the substitution model, and once state is introduced, they wax poetic about its loss. The following quote is from a lecture series the authors gave using SICP as a textbook. After demonstrating how encapsulated explicit state can behave as the function above does, Sussman relates that:</p>

<blockquote>
  <p>‚ÄúAnd what we see is the same expression leads to two different answers, depending upon time. So demo is not a function, does not compute a mathematical function. In fact, you could also see why now, of course, this is the first place where the substitution model isn‚Äôt going to work. This kills the substitution model dead.‚Äù<a href="#bib3">[3]</a></p>
</blockquote>

<p>Anyone who has struggled with understanding why they find imperative programs so complex, especially at medium or large scale, should review the transitions in these two books to help them put a finer point on their understanding. Seeing the authors of two prominent texts articulate this idea so clearly, that <em>complexity comes along with state</em> and that <em>state is a function of time</em> was a revelation.</p>

<p>One aspect of the use of <code class="language-plaintext highlighter-rouge">set!</code> in Scheme that Sussman highlights can be seen in the following implementation of a factorial function that uses explicit state internally:</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">factorial</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nf">product</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="nf">counter</span> <span class="mi">1</span><span class="p">))</span>
    <span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">iter</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">counter</span> <span class="nv">n</span><span class="p">)</span>
          <span class="nv">product</span>
          <span class="p">(</span><span class="k">begin</span> <span class="p">(</span><span class="k">set!</span> <span class="nv">product</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">counter</span> <span class="nv">product</span><span class="p">))</span> <span class="c1">;; Assignment 1</span>
                 <span class="p">(</span><span class="k">set!</span> <span class="nv">counter</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">counter</span> <span class="mi">1</span><span class="p">))</span>       <span class="c1">;; Assignment 2</span>
                 <span class="p">(</span><span class="nf">iter</span><span class="p">))))</span>
    <span class="p">(</span><span class="nf">iter</span><span class="p">)))</span></code></pre></figure>

<p>What Sussman highlights is that when writing this program, the programmer is forced to make the decision for what order to assign the variables in, as shown in the lines labeled <code class="language-plaintext highlighter-rouge">Assignment 1</code> and <code class="language-plaintext highlighter-rouge">Assignment 2</code> above. If you switch the orders of these two statements, which would preserve the semantic meaning of the program (what you want to do is set the product and increment the counter, the order is meaningless).you will introduce a bug. And as Sussman states:</p>

<blockquote>
  <p>‚ÄúIt‚Äôs a bug that wasn‚Äôt available until this moment, until we introduced something that had time in 
it.‚Äù<a href="#bib3">[3]</a></p>
</blockquote>

<p>I thought this was a fascinating way of stating what is at the heart of the complexity of large imperative programs. After Abelson and Sussman introduce this bug, in the footnotes of the textbook they write:</p>

<blockquote>
  <p>‚ÄúIn view of this, it is ironic that introductory programming is most often taught in a highly imperative style. This may be a vestige of a belief, common throughout the 1960s and 1970s, that programs that call procedures must inherently be less efficient than programs that perform assignments. (Steele 1977<a href="#bib4">[4]</a> debunks this argument.)‚Äù<a href="#bib5">[5]</a></p>
</blockquote>

<p>Tracing the preference for educational choice to decisions made based on uninformed understanding of computer architecture is probably too good to be true, but it is an interesting question, and one worth thinking about more - what does the tendency towards imperative programming languages in educational contexts buy us?</p>

<h4 id="abstract-data-types">Abstract Data Types</h4>

<p>Abelson and Sussman‚Äôs idea, that we pay for the costs of explicit state because it makes certain other aspects of practical programming that much more elegant and potentially modular, is echoed in CTM‚Äôs coverage of Data Types (ADTs), or ‚Äúa set of values together with a set of operations on these values.‚Äù The authors had covered ADTs earlier in the declarative model, and demonstrated that there are various properties, such as openness and security, that define how a programmer interacts with instances through their interfaces. With the stateful model, however, things have changed:</p>

<blockquote>
  <p>‚ÄúNow that we have added explicit state to the model, we can present a more complete set of techniques for doing data abstraction.‚Äù</p>
</blockquote>

<p>There are eight ways to organize a data abstraction according to the book‚Äôs formulation, and many of them are demonstrated. A simple stack data structure is presented in the declarative style and then shown in other variations until the stateful version is shown. In all cases the stateful version looks like the modern practical programmer‚Äôs idea of an ADT, with a proper interface and knowable performance characteristics.</p>

<p>Polymorphism as it comes to operating on ADTs and parameter passing in the stateful model are covered, wherein the ideas of the costs and benefits of state are thoroughly examined. After all of these topics are under our belts, we get introduced to some nice implementations of ‚ÄúStateful collections,‚Äù which are of great interest to modern programmers, who tend to prefer maps to lists.</p>

<p>Tuples, records, arrays, and dictionaries are designed to meet a common interface for access and setting content and position where appropriate. It is once we can encapsulate values within data type objects and make them conform to common interfaces that we really see the promise of explicit state. When well contained, it is indispensable, and though it would be nice to never need it, because everything would be declarative, we know that that just isn‚Äôt realistic.</p>

<h4 id="reasoning-with-state">Reasoning With State</h4>

<p>After discussing the potential pitfalls of the stateful model, Section 6.6 discusses some ideas for tools that can be used to reason about stateful programs. The reason this is necessary is summed up nicely here:</p>

<blockquote>
  <p>‚ÄúPrograms that use state in a haphazard way are very difficult to understand. For example, if the state is visible throughout the whole program, then it can be assigned anywhere. The only way to reason is to consider the whole program at once. Practically speaking, this is impossible for big programs.‚Äù</p>
</blockquote>

<p>Invariant assertions are introduced as a way to get back some of the transparency that comes with reasoning about declarative programs. The idea is that each operation associated with a data structure (as in any of the ADTs discussed above) would have pre- and post-conditions specified. These specifications would serve to bolster the design of the system and how a programmer can come to understand what its goals are. The fact that they are separate from the implementation is touted as an advantage that decouples the interface from its code. Assertions like this have been seen in <a href="http://archive.eiffel.com/doc/online/eiffel50/intro/language/invitation-07.html">the Eiffel programming language</a> amongst others, and the possibilities of extending <a href="http://ruby-lang.org/">popular dynamic languages</a> with these capabilities is worth exploring.</p>

<p>To offer a higher level of abstraction for reasoning about programs, proof rules for the stateful model (without aliasing) are shown, which is an intense read that I am still trying to form an intuition for. In one of the admittedly most gentle intersections of mathematical proof notation and computer science theory I‚Äôve come across, the authors show the proof rules for binding, assignment, procedures (with and without external references) and loops. Doing this, they have built a sound foundation for formal reasoning with respect to the operational semantics of the kernel language. New concepts can be invented, proof rules created, and so on, and the authors state that this can be a means of reasoning about stateful programs. The interface for this is unclear to me, and I‚Äôll need to do some more reading to really grasp at what level of abstraction it is supposed to be applied. Nonetheless it is worthwhile for how rules for one statement can be applied to others to form an intuitive system of related operations.</p>

<h4 id="a-reason-for-state">A Reason For State</h4>

<p>The authors end the chapter with a pair of warning statements:</p>

<blockquote>
  <p>‚ÄúThe real world is parallel‚Äù</p>
</blockquote>

<blockquote>
  <p>‚ÄúThe real world is distributed‚Äù</p>
</blockquote>

<p>Both of these present challenges to stateful programming because of its sequential nature. If bringing this up under the heading of ‚ÄúA Reason For State‚Äù seems odd, my point is that these notions help us put a finer point on when we need to use state and how we should use it.</p>

<p>Programming languages that embrace distribution, like Erlang, naturally have a better handle on how to encapsulate state than languages that don‚Äôt. The process abstraction in Erlang, like the message passing model discussed in an earlier chapter of CTM, is an example of how we can isolate state in a way where reasoning about it becomes simpler, so you do not in fact have to ‚Äúhold the whole program in your head.‚Äù Of course in practice this is difficult because programs in any language can be written in complex, order sensitive ways that defy logic, and so we must press on and continue to develop tools for reasoning about programs.</p>

<p>The practice of examining what state is and why we need it is a fundamental component of understanding practical computation. We have seen bits of state here and there, encapsulated in lazy computation, in message-passing concurrency, etc. The idea of understanding all of the complexities that state introduces is not to search for a way where it isn‚Äôt necessary, but to search for a system where dealing with it is tractable. One goal for modern programming languages is to create a system where applying explicit state where it is not necessary would not be an attractive or ‚Äúeasy‚Äù way of solving a problem.</p>

<p>State is a fundamental component of how we reason about computation and thus the tradeoffs we accept are worth it in the long run. How we introduce it into our programs can be positively impacted by a deeper intuition for how it works and how it got there in the first place.</p>

<h4 id="works-cited">Works Cited</h4>

<p><em>All quotes unless otherwise cited from Van Roy and Haridi. All Scheme code above from <a href="#bib5">[5]</a></em></p>

<p><a id="bib1">[1]</a> Van Roy and Haridi. <em>Concepts, Techniques, and Models of Computer Programming</em> MIT Press, hardcover, ISBN 0-262-22069-5, March 2004</p>

<p><a id="bib2">[2]</a> Abelson, Harold and Sussman, Gerald Jay. <em>Structure and Interpretation of Computer Programs Lecture Series 5A: Assignment, State, and Side-effects</em> <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/5a-assignment-state-and-side-effects/">Available online here</a></p>

<p><a id="bib3">[3]</a> Eric Grimson, Peter Szolovits, and Trevor Darrell, 6.001 Structure and Interpretation of Computer Programs, Spring 2005. (Massachusetts Institute of Technology: MIT OpenCourseWare). http://ocw.mit.edu (accessed 12 02, 2013. License: Creative Commons Attribution-Noncommercial-Share Alike. <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/5a-assignment-state-and-side-effects/lec5a_512kb.pdf">PDF Of Lecture Transcript</a></p>

<p><a id="bib4">[4]</a> Steele, Guy. <em>Debunking the ‚ÄòExpensive Procedure Call‚Äô Myth, or, Procedure Call Implementations Considered Harmful, or, Lambda: The Ultimate GOTO</em> MIT AI Memo #443 <a href="http://repository.readscheme.org/ftp/papers/ai-lab-pubs/AIM-443.pdf">PDF available here</a></p>

<p><a id="bib5">[5]</a> Abelson, Harold and Sussman, Gerald Jay. <em>Structure and Interpretation of Computer Programs, second edition.</em> MIT Press, 1996. <a href="http://mitpress.mit.edu/sicp/">Available online here</a>.</p>
:ET