I"¿	<p>#
#</p>
<h3 id="a-certain-kind-of-book-and-a-thank-you">A Certain Kind of Book and a Thank You</h3>

<p>Computer Science is a deep discipline. The range of areas of specialization is dizzying and encompasses enough fascinating applications to keep anyone busy for a lifetime. Arguably, all of these areas rely on the basic understanding of the foundation of our field: computation. What is computation? Why is understanding it important, and how can we learn it from a book? It turns out you just need to find that <strong>certain kind of book.</strong></p>

<p>That <strong>certain</strong> kind of book is one that has a point of view, that is obviously the product of a lot of thought, that has obviously made the rounds and kicked around for long enough that itâ€™s here to stay. It has a system built in, answers as many questions as it can, and compromises as little as possible.</p>

<p>In other words, books work and are worth it. Iâ€™ve spent a decent amount of 2013 trying to understand what computers do without actually sitting in front of them, and Iâ€™m pretty sure itâ€™s working.</p>

<p>As 2014 draws near, why not consider indulging in a year long project of reading one or more of the following books, which for me are that <strong>certain kind of book.</strong></p>

<p><em>Structure and Interpretation of Computer Programs</em> by Gerald Jay Sussman and Hal Abelson</p>

<p>Learn from the masters, through the lens of Scheme. Available online for free and a great place to start.</p>

<p><em>Concepts, Techniques, and Models of Computer Programming</em> by Peter Van Roy and Seif Haridi</p>

<p>Take a small kernel language and evolve it beyond your imagination, implode paradigms, and break all rules. I recommend the hardcover edition, a highlighter, and several free months.</p>

<p><em>Essentials of Programming Languages</em> by Daniel P. Friedman and Mitchell Wand</p>

<p>Learn to compute by learning to understand interpreters in Scheme. Dense and rich, Iâ€™m planning to work through this in 2014.</p>

<p><em>The Architecture of Symbolic Computers</em> by Peter M. Kogge</p>

<p>Cast off the shackles of von Neumann and study the implementations of Functional and Logic programming languages. Worth the trouble to find it for a reasonable price. Another 2014 project.</p>

<h3 id="thank-you">Thank You</h3>

<p>Finally, Iâ€™d like to say thank you all for your support and for reading my writing in 2013. Your comments and encouragement make it worthwhile.</p>
:ET